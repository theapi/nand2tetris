// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    // Actions must be done in the order given so the resulting calculations work.
    
    // Handle zx.
    // If zx is set then out 0, otherwise whatever x is.
    Mux16(a=x, b=false, sel=zx, out=zxOut);

    // Handle zy.
    // If zy is set then out 0, otherwise whatever y is.
    Mux16(a=y, b=false, sel=zy, out=zyOut);
    
    
    // Handle nx.
    // if (nx == 1) set x = !x 
    // If nx is set then out !x, , otherwise whatever zxOut is.
    // Invert all the results of zxOut.
    Not16(in=zxOut, out=notzxOut);
    // Now select the inverted bits, otherwise whatever zxOut is.
    Mux16(a=zxOut, b=notzxOut, sel=nx, out=nxOut);
    
    // Handle ny.
    // if (ny == 1) set y = !y
    // If yx is set then out !y, , otherwise whatever zyOut is.
    // Invert all the results of zyOut.
    Not16(in=zyOut, out=notzyOut);
    // Now select the inverted bits, otherwise whatever zyOut is.
    Mux16(a=zyOut, b=notzyOut, sel=ny, out=nyOut);
    
    
    // Output x plus y if f == 1, otherwise x AND y.
    Add16(a=nxOut, b=nyOut, out=xPLUSy);
    And16(a=nxOut, b=nyOut, out=xANDy);
    Mux16(a=xANDy, b=xPLUSy, sel=f, out=fOut);
    
    
    // Handle no
    // if (no == 1) set out = !out 
    Not16(in=fOut, out=notfOut);
    // split the out into upper & lower bytes for the Or8Way to use
    // also rember the MSB 
    Mux16(a=fOut, b=notfOut, sel=no, out=out, out[8..15]=noOutUpper, out[0..7]=noOutLower, out[15]=msb);
    
    
    // Handle zr
    // if (out == 0) set zr = 1
    // or all the bits looking for a 1
    Or8Way(in=noOutUpper, out=zrUpper);
    Or8Way(in=noOutLower, out=zrLower);
    Or(a=zrUpper, b=zrLower, out=zrOr);
    Not(in=zrOr, out=zr);
    
    // Handle ng
    // if (out < 0) set ng = 1
    // if MSB == 1 then its negative
    Or(a=msb, b=false, out=ng);

}
