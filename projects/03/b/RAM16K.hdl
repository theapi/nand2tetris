// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:

    /*
     DMux8Way 
      IN in, sel[3];
      OUT a, b, c, d, e, f, g, h;
     */
     // Demux the 3 most signifacant bits to figure out which RAM64 to use.
     DMux4Way(
       in=load, sel=address[12..13], 
       a=loadA, b=loadB, c=loadC, d=loadD
     );
     
    
    /*
    RAM64 
    IN in[16], load, address[6];
    OUT out[16];
    */
    // Let the RAM64 handle the regeisters they control.
    RAM4K(in=in, load=loadA, address=address[0..11], out=outA);
    RAM4K(in=in, load=loadB, address=address[0..11], out=outB);
    RAM4K(in=in, load=loadC, address=address[0..11], out=outC);
    RAM4K(in=in, load=loadD, address=address[0..11], out=outD);

    
    // Mux the outs together
    /*
    Mux8Way16 
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16]
    */
    Mux4Way16(a=outA, b=outB, c=outC, d=outD, sel=address[12..13], out=out);
    
}
