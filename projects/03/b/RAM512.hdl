// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    
    /*
     DMux8Way 
      IN in, sel[3];
      OUT a, b, c, d, e, f, g, h;
     */
     // Demux the 3 most signifacant bits to figure out which RAM64 to use.
     DMux8Way(
       in=load, sel=address[6..8], 
       a=loadA, b=loadB, c=loadC, d=loadD,
       e=loadE, f=loadF, g=loadG, h=loadH
     );
     
    
    /*
    RAM64 
    IN in[16], load, address[6];
    OUT out[16];
    */
    // Let the RAM64 handle the regeisters they control.
    RAM64(in=in, load=loadA, address=address[0..5], out=outA);
    RAM64(in=in, load=loadB, address=address[0..5], out=outB);
    RAM64(in=in, load=loadC, address=address[0..5], out=outC);
    RAM64(in=in, load=loadD, address=address[0..5], out=outD);
    RAM64(in=in, load=loadE, address=address[0..5], out=outE);
    RAM64(in=in, load=loadF, address=address[0..5], out=outF);
    RAM64(in=in, load=loadG, address=address[0..5], out=outG);
    RAM64(in=in, load=loadH, address=address[0..5], out=outH);
    
    // Mux the outs together
    /*
    Mux8Way16 
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16]
    */
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address[6..8], out=out);

}