// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    
    // 15 bit addresses:
    
    // RAM16K
    // 000 0000 0000 0000 to
    // 011 1111 1111 1111
    
    // Screen
    // 100 0000 0000 0000 to
    // 101 1111 1111 1111
    
    // Keyboard
    // 110 0000 0000 0000
    
    
    // if (address[15] == 0 && address[14] == 0): RAM16K
    // if (address[15] == 0 && address[14] == 1): RAM16K
    // if (address[15] == 1 && address[14] == 0): Screen
    // if (address[15] == 1 && address[14] == 1): Keyboard
    // 00
    // 01
    // 10
    // 11
    
    
    /**
     * 4-way demultiplexor:
     * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
     *                {0, in, 0, 0} if sel == 01
     *                {0, 0, in, 0} if sel == 10
     *                {0, 0, 0, in} if sel == 11
     */
    DMux4Way(in=load, sel=address[13..14], a=loadRamA, b=loadRamB, c=loadScreen, d=loadKbd);
    
    /*
     RAM16K
     IN in[16], load, address[14];
     OUT out[16];
    */
    RAM16K(in=in, load=loadRamA, address=address[0..13], out=ramaOut);
    RAM16K(in=in, load=loadRamB, address=address[0..13], out=rambOut);
    
    /*
     Screen 
     IN  in[16],    // what to write
     load,          // write-enable bit
     address[13];   // where to read/write
     OUT out[16];   // Screen value at the given address
    */
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    
    /*
     Keyboard
     OUT out[16];
    */
    Keyboard(out=keyboardOut);
    
    
    /**
     * 4-way 16-bit multiplexor:
     * out = a if sel == 00
     *       b if sel == 01
     *       c if sel == 10
     *       d if sel == 11
     */
    Mux4Way16(a=ramaOut, b=rambOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);
}
