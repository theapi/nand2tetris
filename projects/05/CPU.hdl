// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
// A REGISTER
  
    // Decide what goes into the A register
    // Choose between the output of the ALU and the out of the program counter
    
    // If MSB of instruction == 0 then the A register must be set with the 15 bit remaining value.
    // Else if the "d1" bit of the instruction is set then store the value of outM in the A register.
    
    // if instruction[15] and instruction[5] == store outM in A
    // else store the instruction in A
    And(a=instruction[15], b=instruction[5], out=CsetA, out=selA);
    
    // Check for an A instruction
    Nand(a=instruction[15], b=true, out=AsetA);
    
    // Whether to load the A register
    Or(a=AsetA, b=CsetA, out=loadA);
    
    
    // IN  a[16], b[16], sel;
    // OUT out[16];
    // If sel == 1 then out = b else out = a.
    Mux16(a=instruction, b=outAlu1, sel=selA, out=inA);
    
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    
    
// writeM

    // if d3 (instruction[3]) == 1 and instruction[15] == 1 (C instruction) then write to M
    And(a=instruction[3], b=instruction[15], out=writeM, out=selAddressM);
       
    
// A/M into the ALU
  
    // If bit[12], the "a" bit is 1 then use M (inM) otherwise use A register content.
    // If sel == 1 then out = b else out = a.
    Mux16(a=outA, b=inM, sel=instruction[12], out=inAM);
    
    
// D REGISTER

    // If bit[4] "d2" is 1 then store ALU out in the D register
    DRegister(in=inD, load=instruction[4], out=outD);
    
    
// ALU

    ALU(
        x=outD, y=inAM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=outM, out=inD, out=outAlu, out=outAlu1,
        zr=zr, ng=ng
    );
    
    
// PROGRAM COUNTER
    // if no jump then inPc = addressM
    // "j1" is instruction[2]
    // "j2" is instruction[1]
    // "j0" is instruction[0]
    
    // if out > 0
    Or(a=zr, b=ng, out=ngOrZr);
    Not(in=ngOrZr, out=JGT);
    
    // if out == 0
    // if zr == 1
    And(a=zr, b=true, out=JEQ);
    
    // if out >= 0
    Or(a=JGT, b=JEQ, out=JGE);

    // if out < 0
    // if ng == 1
    And(a=ng, b=true, out=JLT);
    
    // if out != 0
    Not(in=JEQ, out=notJEQ);
    And(a=notJEQ, b=true, out=JNE);
    
    // if out <= 0
    Or(a=JLT, b=JEQ, out=JLE);
    
    Mux8Way16(
        a=false, b[1..15]=false, b[0]=JGT, c[1..15]=false, c[0]=JEQ, d[1..15]=false, d[0]=JGE, 
        e[1..15]=false, e[0]=JLT, f[1..15]=false, f[0]=JNE, g[1..15]=false, g[0]=JLE, h=true, 
        sel=instruction[0..2], out[0]=potentialJump
    );

    // Only jump if a C instruction
    And(a=instruction[15], b=potentialJump, out=jump);
    
    // Increment if not jumping
    Not(in=jump, out=increment);

    // Which address to use
    //Mux16(a=outA, b=outAlu, sel=jump, out=inPc);
    Mux16(a=outAlu, b=outA, sel=jump, out=inPc);
    
    PC(in=inPc, inc=increment, load=jump, reset=reset, out[0..14]=pc);
    
}
